name: Build and Release

on:
  push:
    tags:
      - '*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:  # Allow manual execution

jobs:
  build:
    name: Build and Publish
    runs-on: windows-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required to fetch all tags

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore Dependencies
        run: dotnet restore src/

      # - name: Run Tests
      #   run: dotnet test --no-restore --verbosity normal --project src/*.sln

      - name: Publish x86
        run: dotnet publish src/ScreenshareHelper/ScreenshareHelper.csproj -c Release -r win-x86 --self-contained false -p:PublishSingleFile=true -o ${{ github.workspace }}/bin/x86

      - name: Publish x64
        run: dotnet publish src/ScreenshareHelper/ScreenshareHelper.csproj -c Release -r win-x64 --self-contained false -p:PublishSingleFile=true -o ${{ github.workspace }}/bin/x64

      - name: Create ZIP Archives (Windows)
        shell: pwsh
        run: |
            $x86Path = "${{ github.workspace }}/bin/x86"
            $x64Path = "${{ github.workspace }}/bin/x64"
    
            if (Test-Path $x86Path) { Compress-Archive -Path "$x86Path/*" -DestinationPath "${{ github.workspace }}/bin/x86.zip" }
            if (Test-Path $x64Path) { Compress-Archive -Path "$x64Path/*" -DestinationPath "${{ github.workspace }}/bin/x64.zip" }


      - name: Upload Artifacts (x86)
        uses: actions/upload-artifact@v4
        with:
          name: published-x86
          path: "${{ github.workspace }}/bin/x86.zip"

      - name: Upload Artifacts (x64)
        uses: actions/upload-artifact@v4
        with:
          name: published-x64
          path: "${{ github.workspace }}/bin/x64.zip"

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures full commit history is available
      - name: Determine Release Tag
        id: release_tag
        run: |
            if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # If triggered by a tag push, use the tag directly
            TAG_NAME="${GITHUB_REF#refs/tags/}"
            else
            # If manually triggered, find last tag and create an RC version
            LAST_TAG=$(git describe --tags --abbrev=0)
            EXISTING_RC_COUNT=$(gh release list --json tagName | jq "[.[].tagName | test(\"^${LAST_TAG}-rc\\\\.[0-9]+$\")] | length")
            NEW_RC_NUMBER=$((EXISTING_RC_COUNT + 1))
            TAG_NAME="${LAST_TAG}-rc.${NEW_RC_NUMBER}"
            fi
            echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash

      - name: Get Previous Tag
        id: prev_tag
        run: echo "PREV_TAG=$(git describe --tags --abbrev=0 $(git rev-list --tags --max-count=2 | tail -n1))" >> $GITHUB_ENV

      - name: Get Commit Messages
        id: commit_messages
        run: |
            if [ -z "$PREV_TAG" ]; then
              echo "No previous tag found. Using all commits."
              COMMITS=$(git log --pretty=format:'- %h %s')
            else
              echo "Fetching commits between $PREV_TAG and ${{ github.ref_name }}"
              COMMITS=$(git log $PREV_TAG..${{ github.ref_name }} --pretty=format:'- %h %s')
            fi

            # Properly store multiline commit log
            {
              echo "COMMITS<<EOF"
              echo "$COMMITS"
              echo "EOF"
            } >> "$GITHUB_ENV"

      - name: Download x86 Artifact
        uses: actions/download-artifact@v4
        with:
          name: published-x86
          path: bin/x86

      - name: Download x64 Artifact
        uses: actions/download-artifact@v4
        with:
          name: published-x64
          path: bin/x64

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: Release ${{ env.TAG_NAME }}
          body: |
            ## Changes in this release
            ${{ env.COMMITS }}
          files: |
            ./bin/x86.zip
            ./bin/x64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
